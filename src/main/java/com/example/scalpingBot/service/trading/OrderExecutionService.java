package com.example.scalpingBot.service.trading;

import com.example.scalpingBot.dto.exchange.OrderDto;
import com.example.scalpingBot.entity.Trade;
import com.example.scalpingBot.entity.TradingPair;
import com.example.scalpingBot.enums.OrderSide;
import com.example.scalpingBot.enums.OrderStatus;
import com.example.scalpingBot.enums.OrderType;
import com.example.scalpingBot.exception.ExchangeApiException;
import com.example.scalpingBot.exception.TradingException;
import com.example.scalpingBot.repository.TradeRepository;
import com.example.scalpingBot.repository.TradingPairRepository;
import com.example.scalpingBot.service.exchange.ExchangeApiService;
import com.example.scalpingBot.service.notification.NotificationService;
import com.example.scalpingBot.utils.MathUtils;
import com.example.scalpingBot.utils.ValidationUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞.
 * –í–∫–ª—é—á–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å OrderManagementService.
 */
@Service
public class OrderExecutionService {

    private static final Logger log = LoggerFactory.getLogger(OrderExecutionService.class);

    private final ExchangeApiService exchangeApiService;
    private final TradeRepository tradeRepository;
    private final TradingPairRepository tradingPairRepository;
    private final NotificationService notificationService;
    private final OrderManagementService orderManagementService;
    private final ScheduledExecutorService orderMonitorExecutor;

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ä–¥–µ—Ä–æ–≤
    private static final int ORDER_CHECK_INTERVAL_SECONDS = 5;
    private static final int MAX_ORDER_WAIT_MINUTES = 5;
    private static final int MAX_PARTIAL_FILL_CHECKS = 20;

    @Autowired
    public OrderExecutionService(@Qualifier("binance") ExchangeApiService exchangeApiService,
                                 TradeRepository tradeRepository,
                                 TradingPairRepository tradingPairRepository,
                                 NotificationService notificationService,
                                 OrderManagementService orderManagementService) {
        this.exchangeApiService = exchangeApiService;
        this.tradeRepository = tradeRepository;
        this.tradingPairRepository = tradingPairRepository;
        this.notificationService = notificationService;
        this.orderManagementService = orderManagementService;
        this.orderMonitorExecutor = Executors.newScheduledThreadPool(2);
    }

    /**
     * –ò—Å–ø–æ–ª–Ω—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º.
     *
     * @param symbol   –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞.
     * @param side     –°—Ç–æ—Ä–æ–Ω–∞ —Å–¥–µ–ª–∫–∏ (BUY –∏–ª–∏ SELL).
     * @param quantity –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏.
     * @return OrderDto —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–º –æ—Ä–¥–µ—Ä–µ.
     */
    @Transactional
    public OrderDto executeOrder(String symbol, OrderSide side, BigDecimal quantity) {
        log.info("üîÑ Starting order execution for {} {} of {}", side, quantity.toPlainString(), symbol);

        // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        validateOrderParameters(symbol, side, quantity);

        // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
        TradingPair tradingPair = validateAndGetTradingPair(symbol);

        // 3. –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–∞—Ä—ã
        BigDecimal adjustedQuantity = adjustQuantityPrecision(quantity, tradingPair);

        // 4. –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ä–¥–µ—Ä–∞ –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
        OrderType orderType = determineOrderType(symbol, side, adjustedQuantity);
        BigDecimal price = (orderType == OrderType.LIMIT) ? calculateLimitPrice(symbol, side) : null;

        try {
            // 5. –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ
            OrderDto placedOrder = exchangeApiService.placeOrder(symbol, side, orderType, adjustedQuantity, price);
            log.info("‚úÖ Order placed successfully. Exchange Order ID: {}, Status: {}",
                    placedOrder.getExchangeOrderId(), placedOrder.getStatus());

            // 6. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Ä–¥–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ OrderManagementService
            orderManagementService.trackOrder(placedOrder);

            return placedOrder;

        } catch (ExchangeApiException e) {
            log.error("‚ùå Failed to execute order for {}. Reason: {}", symbol, e.getMessage());
            notificationService.sendError("–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –¥–ª—è " + symbol, e);
            throw e;
        }
    }

    /**
     * –û—Ç–º–µ–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
     */
    @Transactional
    public OrderDto cancelOrder(String symbol, String orderId) {
        log.info("üö´ Attempting to cancel order {} for {}", orderId, symbol);

        try {
            OrderDto cancelledOrder = exchangeApiService.cancelOrder(symbol, orderId);
            log.info("‚úÖ Successfully cancelled order {}. Final status: {}", orderId, cancelledOrder.getStatus());

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–º –æ—Ä–¥–µ—Ä–µ
            if (cancelledOrder.getStatus() == OrderStatus.CANCELED) {
                saveTradeRecord(cancelledOrder);
            }

            return cancelledOrder;

        } catch (ExchangeApiException e) {
            log.error("‚ùå Failed to cancel order {} for {}. Reason: {}", orderId, symbol, e.getMessage());
            notificationService.sendError("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ " + orderId, e);
            throw e;
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞
     */
    private void validateOrderParameters(String symbol, OrderSide side, BigDecimal quantity) {
        ValidationUtils.assertNotBlank(symbol, "Trading pair symbol cannot be blank");
        ValidationUtils.assertNotNull(side, "Order side cannot be null");
        ValidationUtils.assertPositive(quantity, "Order quantity must be positive");
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
     */
    private TradingPair validateAndGetTradingPair(String symbol) {
        Optional<TradingPair> tradingPairOpt = tradingPairRepository.findBySymbol(symbol);

        if (tradingPairOpt.isEmpty()) {
            throw new TradingException("Trading pair configuration not found for: " + symbol);
        }

        TradingPair tradingPair = tradingPairOpt.get();

        if (!tradingPair.isActive()) {
            throw new TradingException("Trading pair " + symbol + " is not active for trading");
        }

        return tradingPair;
    }

    /**
     * –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
     */
    private BigDecimal adjustQuantityPrecision(BigDecimal quantity, TradingPair tradingPair) {
        BigDecimal adjustedQuantity = MathUtils.scale(quantity, tradingPair.getQuantityPrecision());

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞
        if (tradingPair.getMinOrderSize() != null) {
            BigDecimal estimatedValue = adjustedQuantity.multiply(BigDecimal.valueOf(50000)); // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            if (estimatedValue.compareTo(tradingPair.getMinOrderSize()) < 0) {
                throw new TradingException(String.format(
                        "Order size too small. Estimated value: %s, minimum required: %s",
                        estimatedValue.toPlainString(), tradingPair.getMinOrderSize().toPlainString()
                ));
            }
        }

        log.debug("Adjusted quantity from {} to {} for precision {}",
                quantity.toPlainString(), adjustedQuantity.toPlainString(), tradingPair.getQuantityPrecision());

        return adjustedQuantity;
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ—Ä–¥–µ—Ä–∞
     */
    private OrderType determineOrderType(String symbol, OrderSide side, BigDecimal quantity) {
        // –î–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º MARKET –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
        // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ –º–µ–∂–¥—É MARKET –∏ LIMIT
        // –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏, —Å–ø—Ä–µ–¥–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞
        return OrderType.MARKET;
    }

    /**
     * –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
     */
    private BigDecimal calculateLimitPrice(String symbol, OrderSide side) {
        try {
            var ticker = exchangeApiService.getTicker(symbol);
            BigDecimal marketPrice = ticker.getLastPrice();

            // –î–ª—è –ø–æ–∫—É–ø–∫–∏ —Å—Ç–∞–≤–∏–º —Ü–µ–Ω—É —á—É—Ç—å –Ω–∏–∂–µ market, –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ - —á—É—Ç—å –≤—ã—à–µ
            BigDecimal adjustment = side == OrderSide.BUY ?
                    new BigDecimal("-0.001") : new BigDecimal("0.001"); // 0.1%

            return MathUtils.applyPercentage(marketPrice, adjustment);

        } catch (Exception e) {
            log.warn("Failed to calculate limit price for {}, fallback to market order", symbol);
            return null;
        }
    }

    /**
     * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
     * DEPRECATED: –¢–µ–ø–µ—Ä—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–ø–æ–ª–Ω—è–µ—Ç OrderManagementService
     */
    @Deprecated
    private void monitorOrderExecution(OrderDto initialOrder) {
        CompletableFuture.runAsync(() -> {
            String orderId = initialOrder.getExchangeOrderId();
            String symbol = initialOrder.getSymbol();
            int checkCount = 0;

            log.debug("üîç Starting order monitoring for {} ({})", orderId, symbol);

            try {
                while (checkCount < MAX_PARTIAL_FILL_CHECKS) {
                    Thread.sleep(ORDER_CHECK_INTERVAL_SECONDS * 1000L);
                    checkCount++;

                    OrderDto currentOrder = exchangeApiService.getOrderStatus(symbol, orderId);

                    switch (currentOrder.getStatus()) {
                        case FILLED -> {
                            log.info("‚úÖ Order {} fully executed", orderId);
                            saveTradeRecord(currentOrder);
                            notificationService.sendSuccess(String.format(
                                    "–û—Ä–¥–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª–Ω–µ–Ω: %s %s %s –ø–æ —Ü–µ–Ω–µ %s",
                                    currentOrder.getSide(), currentOrder.getExecutedQuantity(),
                                    symbol, currentOrder.getPrice()
                            ));
                            return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                        }
                        case PARTIALLY_FILLED -> {
                            log.info("‚è≥ Order {} partially filled: {}/{}",
                                    orderId, currentOrder.getExecutedQuantity(), currentOrder.getOriginalQuantity());
                            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                        }
                        case CANCELED, REJECTED, EXPIRED -> {
                            log.warn("‚ùå Order {} ended with status: {}", orderId, currentOrder.getStatus());
                            saveTradeRecord(currentOrder);
                            notificationService.sendWarning(String.format(
                                    "–û—Ä–¥–µ—Ä %s –∑–∞–≤–µ—Ä—à–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: %s", orderId, currentOrder.getStatus()
                            ));
                            return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                        }
                        case NEW -> {
                            log.debug("‚è≥ Order {} still pending execution", orderId);
                        }
                    }
                }

                // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫
                log.warn("‚ö†Ô∏è Order monitoring timeout for {} after {} checks", orderId, MAX_PARTIAL_FILL_CHECKS);
                OrderDto finalOrder = exchangeApiService.getOrderStatus(symbol, orderId);
                saveTradeRecord(finalOrder);

            } catch (Exception e) {
                log.error("‚ùå Error during order monitoring for {}: {}", orderId, e.getMessage(), e);
                notificationService.sendError("–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ä–¥–µ—Ä–∞ " + orderId, e);
            }
        }, orderMonitorExecutor);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Å–¥–µ–ª–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
     */
    @Transactional
    public void saveTradeRecord(OrderDto orderDto) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ —Å–¥–µ–ª–∫–∞
            Optional<Trade> existingTrade = tradeRepository.findByExchangeTradeId(orderDto.getExchangeOrderId());
            if (existingTrade.isPresent()) {
                log.debug("Trade record already exists for order {}", orderDto.getExchangeOrderId());
                return;
            }

            Trade trade = Trade.builder()
                    .exchangeTradeId(orderDto.getExchangeOrderId())
                    .tradingPair(orderDto.getSymbol())
                    .status(orderDto.getStatus())
                    .side(orderDto.getSide())
                    .type(orderDto.getType())
                    .price(orderDto.getPrice())
                    .quantity(orderDto.getExecutedQuantity()) // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    .commission(calculateCommission(orderDto))
                    .commissionAsset(determineCommissionAsset(orderDto))
                    .executionTimestamp(orderDto.getUpdatedAt() != null ? orderDto.getUpdatedAt() : LocalDateTime.now())
                    .build();

            tradeRepository.save(trade);

            log.info("üíæ Saved trade record: {} {} {} at {}",
                    trade.getSide(), trade.getQuantity(), trade.getTradingPair(), trade.getPrice());

        } catch (Exception e) {
            log.error("‚ùå Failed to save trade record for order {}: {}",
                    orderDto.getExchangeOrderId(), e.getMessage(), e);
            // –ù–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π flow
        }
    }

    /**
     * –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞ - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –±–∏—Ä–∂–∏)
     */
    private BigDecimal calculateCommission(OrderDto orderDto) {
        // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è 0.1% –¥–ª—è Binance
        return orderDto.getExecutedQuantity()
                .multiply(orderDto.getPrice())
                .multiply(new BigDecimal("0.001"));
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞ –∫–æ–º–∏—Å—Å–∏–∏
     */
    private String determineCommissionAsset(OrderDto orderDto) {
        // –û–±—ã—á–Ω–æ –∫–æ–º–∏—Å—Å–∏—è –±–µ—Ä–µ—Ç—Å—è –≤ quote –≤–∞–ª—é—Ç–µ (USDT) –∏–ª–∏ BNB
        String symbol = orderDto.getSymbol();
        if (symbol.endsWith("USDT")) return "USDT";
        if (symbol.endsWith("BTC")) return "BTC";
        return "USDT"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    /**
     * Graceful shutdown
     */
    public void shutdown() {
        log.info("üõë Shutting down OrderExecutionService...");
        orderMonitorExecutor.shutdown();
        try {
            if (!orderMonitorExecutor.awaitTermination(10, TimeUnit.SECONDS)) {
                orderMonitorExecutor.shutdownNow();
            }
        } catch (InterruptedException e) {
            orderMonitorExecutor.shutdownNow();
            Thread.currentThread().interrupt();
        }
        log.info("‚úÖ OrderExecutionService shutdown completed");
    }
}